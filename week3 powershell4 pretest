
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<# 1 #>
function q1($var1,$var2,$var3,$var4) {
    <# Return the product of the arguments #>
    $product = ($var1) * ($var2) * ($var3) * ($var4)
    return "$product"
}
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
function q2($arr,$rows,$cols,$key) {
    <# Search the 2 dimensional array for the first occurance of key at column index 0
       and return the value at column index 9 of the same row.
       Return -1 if the key is not found.
    #>
    
}
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
function q3 {
    <# In a loop, prompt the user to enter positive integers one at time.
       Stop when the user enters a -1. Return the maximum positive
       value that was entered."
	#>
   $num = @()
   $n = 0
   while ($n -ge 0) {
    $n = [int](read-host)
    $num += $n
   }
   return ($num | Measure-Object -Maximum).Maximum
}
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
function q4($filename,$whichline) {
    <# Return the line of text from the file given by the `$filename
	   argument that corresponds to the line number given by `$whichline.
	   The first line in the file corresponds to line number 0."
	#>
                  Get-Content $filename | Select-Object -index $whichline
                                        or
                  $content= get-content $filename
                  return $content[$whichline]
}
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
function q5($path) {
    <# Return the child items from the given path sorted
       ascending by their Name
	#>
get-childitem $path | Sort-Object
}
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
function q6 {
    <# Return the sum of all elements provided on the pipeline
	#>
    $sum = 0
    foreach($i in $input){$sum += $i}
    return $sum
}
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
function q7 {
	<# Return only those commands whose noun is process #>
   return get-command -Noun Process
}
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
function q8($adjective) {
    <# Return the string 'PowerShell is ' followed by the adjective given
	   by the `$adjective argument
	#>    
    echo "Powershell is $adjective"
}
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
function q9($addr) {
	<# Return `$true when the given argument is a valid IPv4 address,
	   otherwise return `$false. For the purpose of this function, regard
	   addresses where all octets are in the range 0-255 inclusive to
	   be valid.
	#>
    $pattern = '.*?((\d{1,3}\.){3}\d{1,3})'
    
   
     if ($addr -eq $pattern){
            "true" 
            }
     else {
            $false
     }
}
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
function q10 ($filepath,$lasthash) {
    <# Return `$true if the contents of the file given in the
       `$filepath argument have changed since `$lasthash was
       computed. `$lasthash is the previously computed SHA256
       hash (as a string) of the contents of the file. #>


       (get-filehash $filepath).hash -ne $lasthash
}
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#################################################################### test review ###################################################################################
#1#

#2#
    function($arr,$rows,$cols,$key){
                              #search the 2 dimensional array for the first occueence of key at column index 0
                              return the value at coulm index 9 of the same row. 
                              return -1 if the key is noit found.#
      foreach ($row in $arr) {
        if($row[0] -eq $key){
          return $row[9]
        }
      }
     return -1
    }

#3#
      $vals =@()
      do{
      $val =read-host
      if($val-ne -1){
        $vals += $val
     }
  } until ($val -eq -1)
return ($vals | measure-object -maximum).maximum

#4#
#5#
#6#
#7#
#8#
return 'Powershell is' $adjective
#9#
#10#








