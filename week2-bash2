review ctfs#########################
awk is a pattern scanning thing
more powerful than cut. similar tho
a language inside of language. inception

cat fakepasswd | awk -F: '{print $1}'
cat fakepasswd | awk -F: '{print NF}'

etc passwd wil lawys have 7 fields

awk -F: '($3 ==0) {print $1}' fakepasswd
"if file 3 is equal to zero print 1"

awk -F: 'BEGIN {OFS="@"} {print $1, $3}' fakepasswd
"begin output field separater equal to "" and print field 1 and 3"

cat /etc/passwd | awk -F '($3 >= 150){print $0}'
"if line 3 is greater than or equal to 150, print out whole line "

cat /etc/passwd | awk -F '($3 >= 150){print $1,$6,$3}'
"if line 3 is greater than or euqal to 150, print out line 1 6 and 3"

awk -F: | '($7 == "/usr/sbin/nologin"){print $1,$6,$3}'
######################################################3
sort 
sorts content based on a math table
awk -F: '{print$3}' fakepasswd | sort

awk -F: '{print$3}' fakepasswd | sort -nr --> sort in reverse
"sorts in columns"

cat fakepasswd | sort -k 2,4 --> sorts kolmns 2, and 4.

cat fakepasswd | sort -t : -k 2,4 --> t is for the delmiter (line terminaotr)

sort -u --> sort uniquly
sort -uniq --> also sorts uniquely

cat fake1passwd.tct | sort -t : -k 1 | uniq
"uniq has to have sort"
"sort -U == uniq, however uniq needs to have sort piped into it or fed into it"
##########################
regex
https://regex101.com/library

"when using regex with grep you either use egrep or grep -E"

grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' file.txt


















