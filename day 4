def q1(floatstr):
  4     '''
  5     TLO: 112-SCRPY002, LSA 3,4
  6     Given the floatstr, which is a comma separated string of
  7     floats, return a list with each of the floats in the 
  8     argument as elements in the list.
  9     '''
 10     pass
 11 
 12 def q2(*args):
 13     '''
 14     TLO: 112-SCRPY006, LSA 3
 15     TLO: 112-SCRPY007, LSA 4
 16     Given the variable length argument list, return the average
 17     of all the arguments as a float
 18     '''
 19     pass
 20 
 21 def q3(lst,n):
 22     '''
 23     TLO: 112-SCRPY004, LSA 3
 24     Given a list (lst) and a number of items (n), return a new 
 25     list containing the last n entries in lst.
 26     '''
 27     pass
 28 
 29 def q4(strng):
 30     '''
 31     TLO: 112-SCRPY004, LSA 1,2
 32     TLO: 112-SCRPY006, LSA 3
 33     Given an input string, return a list containing the ordinal numbers of 
 34     each character in the string in the order found in the input string.
 35     '''
 36     pass
 37 
 38 def q5(strng):
 39     '''
 40     TLO: 112-SCRPY002, LSA 1,3
 41     TLO: 112-SCRPY004, LSA 2
 42     Given an input string, return a tuple with each element in the tuple
 43     containing a single word from the input string in order.
 44     '''
 45     pass
 46 
 47 def q6(catalog, order):
 48     '''
 49     TLO: 112-SCRPY007, LSA 2
49     TLO: 112-SCRPY007, LSA 2
 50     Given a dictionary (catalog) whose keys are product names and values are produc    t
 51     prices per unit and a list of tuples (order) of product names and quantities,
 52     compute and return the total value of the order.
 53 
 54     Example catalog:
 55     {
 56         'AMD Ryzen 5 5600X': 289.99,
 57         'Intel Core i9-9900K': 363.50,
 58         'AMD Ryzen 9 5900X': 569.99
 59     }
 60 
 61     Example order:
 62     [
 63         ('AMD Ryzen 5 5600X', 5), 
 64         ('Intel Core i9-9900K', 3)
 65     ]
 66 
 67     Example result:
 68     2540.45 
 69 
 70     How the above result was computed:
 71     (289.99 * 5) + (363.50 * 3)
 72     '''
 73     pass
 74 
 75 def q7(filename):
 76     '''
 77     TLO: 112-SCRPY005, LSA 1
 78     Given a filename, open the file and return the length of the first line 
 79     in the file excluding the line terminator.
 80     '''
 81     pass
 82 
 83 def q8(filename,lst):
 84     '''
 85     TLO: 112-SCRPY003, LSA 1
 86     TLO: 112-SCRPY004, LSA 1,2
 87     TLO: 112-SCRPY005, LSA 1
 88     Given a filename and a list, write each entry from the list to the file
 89     on separate lines until a case-insensitive entry of "stop" is found in 
 90     the list. If "stop" is not found in the list, write the entire list to 
 91     the file on separate lines.
 92     '''
 93     pass
 94 
 95 def q9(miltime):
 96     '''
 97     TLO: 112-SCRPY003, LSA 1
 98     Given the military time in the argument miltime, return a string 
 99     containing the greeting of the day.
100     0300-1159 "Good Morning"
101     1200-1559 "Good Afternoon"
102     1600-2059 "Good Evening"
103     2100-0259 "Good Night"
104     '''
105     pass
106 
107 def q10(numlist):
108     '''
109     TLO: 112-SCRPY003, LSA 1
110     TLO: 112-SCRPY004, LSA 1
111     Given the argument numlist as a list of numbers, return True if all 
112     numbers in the list are NOT negative. If any numbers in the list are
113     negative, return False.
114     '''


def q1(floatstr):
    '''
    Given the floatstr, which is a comma separated string of
    floats, return a list with each of the floats in the 
    argument as elements in the list.
    '''
    '''
    #One method
    newlist = []
    for y in floatstr.split(','):
        newlist.append(float(y))
    return newlist
    '''
    return [float(x) for x in floatstr.split(',')]
    # return list(map(float,floatstr.split(',')))


def q2(*args):
    '''
    Given the variable length argument list, return the average
    of all the numbers in the list as a float
    '''
    return sum(*args)/len(*args)

def q3(lst,n):
    '''
    Given a list (lst) and a number of items (n), return a new 
    list containing the last n entries in lst.
    '''
    return lst[-n:]
    
def q4(strng):
    '''
    Given an input string, return a list containing the ordinal numbers of 
    each character in the string in the order found in the input string.
    '''
    return [ord(x) for x in list(strng)]
    # return list(map(ord,strng))

def q5(strng):
    '''
    Given an input string, return a tuple with each element in the tuple
    containing a single word from the input string in order.
    '''
    return tuple(strng.split())

def q6():
    '''
    Given an input string similar to the below, craft a regular expression  
    pattern to match and extract the date, time, and temperature in groups  
    and return this pattern. Samples given below.
    Date: 12/31/1999 Time: 11:59 p.m. Temperature: 44 F
    Date: 01/01/2000 Time: 12:01 a.m. Temperature: 5.2 C
    '''
    #pat = r"Date:\s+([0-9]+/[0-9]+/[0-9]+)\s+Time:\s+([0-9]+:[0-9]+\s[a|p]\.m\.)\s+Temperature:\s+([0-9.]+\s[KkFfCc])"
    pat = r"Date: (\d+/\d+/\d+) Time: (\d+:\d+ .\.m\.) Temperature: ([\d\.]+ [FfCc])"
    return pat

def q7(filename):
    '''
    Given a filename, open the file and return the length of the first line 
    in the file excluding the line terminator.
    '''
    with open(filename) as fp:
        return len(fp.readline()) - 1 #Line terminator
    # return len(fp.readline()) - 1 if line[-1] == '\n' else 0

def q8(filename,lst):
    '''
    Given a filename and a list, write each entry from the list to the file
    on separate lines until a case-insensitive entry of "stop" is found in 
    the list. If "stop" is not found in the list, write the entire list to 
    the file on separate lines.
    '''
    #'''
    with open(filename, 'w') as fp:
        for item in lst:
            if item.lower() == 'stop':
                break
            fp.write('{}\n'.format(item))
    #'''

def q9(miltime):
    '''
    Given the military time in the argument miltime, return a string 
    containing the greeting of the day.
    0300-1159 "Good Morning"
    1200-1559 "Good Afternoon"
    1600-2059 "Good Evening"
    2100-0259 "Good Night"
    '''
    if miltime >= 301 and miltime < 1200:
        return "Good Morning"
    elif miltime >= 1200 and miltime < 1600:
        return "Good Afternoon"
    elif miltime >= 1600 and miltime < 2100:
        return "Good Evening"
    elif miltime >= 2100 or miltime < 300:
        return "Good Night"

    #if 300 <= miltime <= 1159:
    #   return 'Good Morning'
    #if 1200 <= miltime <= 1559:
    #   return 'Good Afternoon'
    #if 1600 <= miltime <= 2059:
    #   return 'Good Evening'
    #return 'Good Night'
    
def q10(numlist):
    '''
    Given the argument numlist as a list of numbers, return True if all 
    numbers in the list are NOT negative. If any numbers in the list are
    negative, return False.
    '''
    for i in numlist:
        if i < 0:
            return False
    return True
    # return all(map(lambda x: x >= 0, numlist))
